{
  "components": {
    "schemas": {
      "HTTPValidationError": {
        "description": "HTTP validation error in API.",
        "properties": {
          "detail": {
            "description": "Detail of the http validation error.",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "title": "Detail",
            "type": "array"
          }
        },
        "title": "HTTPValidationError",
        "type": "object"
      },
      "ImageEncoding": {
        "description": "The image encoding types available for image generation response.",
        "enum": [
          "jpeg",
          "png"
        ],
        "title": "ImageEncoding",
        "type": "string"
      },
      "ImageGeneration": {
        "description": "Represent a generated image.",
        "properties": {
          "image_b64": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The generated image or None if it was removed for safety.",
            "title": "Image in Base64"
          },
          "removed_for_safety": {
            "description": "True if the image was removed for safety, False otherwise.",
            "title": "Removed For Safety",
            "type": "boolean"
          },
          "safety_score": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "description": "Safety score of the image generated.",
            "title": "Safety Score"
          },
          "seed": {
            "description": "Seed used to generate the image. It can be used to recreate the generation.",
            "title": "Seed",
            "type": "integer"
          }
        },
        "required": [
          "image_b64",
          "removed_for_safety",
          "seed",
          "safety_score"
        ],
        "title": "ImageGeneration",
        "type": "object"
      },
      "ImageGenerationRequest": {
        "additionalProperties": false,
        "description": "Generate one or more images based on the given parameters.",
        "properties": {
          "cfg_scale": {
            "default": 12.0,
            "description": "Floating-point number represeting how closely to adhere to prompt description. Must be a positive number no greater than 50.0.",
            "examples": [
              12.0
            ],
            "exclusiveMinimum": 0.0,
            "maximum": 50.0,
            "title": "Classifier-free Guidance Scale",
            "type": "number"
          },
          "height": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "Integer representing the height of image to generate. None will default to 512 for SD 1.5 and 1024 for SD XL and SSD. Supported resolutions (w,h): SDXL={(1536, 640), (768, 1344), (832, 1216), (1344, 768), (1152, 896), (640, 1536), (1216, 832), (896, 1152), (1024, 1024)}, SD1.5={(768, 576), (1024, 576), (640, 512), (384, 704), (640, 768), (640, 640), (1024, 768), (1536, 1024), (768, 1024), (576, 448), (1024, 1024), (896, 896), (704, 1216), (512, 512), (448, 576), (832, 512), (512, 704), (576, 768), (1216, 704), (512, 768), (512, 832), (1024, 1536), (576, 1024), (704, 384), (768, 512)}, SSD={(1536, 640), (768, 1344), (832, 1216), (1344, 768), (1152, 896), (640, 1536), (1216, 832), (896, 1152), (1024, 1024)}.",
            "examples": [
              1024
            ],
            "title": "Output Image Height"
          },
          "image_encoding": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ImageEncoding"
              }
            ],
            "default": "jpeg",
            "description": "Define which encoding process should be applied before returning the generated image(s).",
            "examples": [
              "jpeg"
            ],
            "title": "Output Image Encoding"
          },
          "init_image": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Starting point image encoded in b64 string for Image to Image generation mode.",
            "title": "Initial Image"
          },
          "negative_prompt": {
            "anyOf": [
              {
                "maxLength": 10000,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Text describing image traits to avoid during generation.",
            "examples": [
              "Fingers, distortions"
            ],
            "title": "Negative Prompt"
          },
          "num_images": {
            "default": 1,
            "description": "Integer representing how many output images to generate with a single prompt/configuration.",
            "examples": [
              1
            ],
            "exclusiveMinimum": 0.0,
            "maximum": 16.0,
            "title": "Number of Output Images",
            "type": "integer"
          },
          "prompt": {
            "description": "Text describing the image content to generate.",
            "examples": [
              "An octopus playing chess, masterpiece, photorealistic"
            ],
            "maxLength": 10000,
            "title": "Input Prompt",
            "type": "string"
          },
          "seed": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "items": {
                  "anyOf": [
                    {
                      "type": "integer"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Integer number or list of integers representing the seeds of random generators. Fixing random seed is useful when attempting to generate a specific image. Must be greater than 0 and less than 2^32.",
            "examples": [
              33445
            ],
            "title": "Fixed Random Seed"
          },
          "steps": {
            "default": 30,
            "description": "Integer repreenting how many steps of diffusion to run. Must be greater than 0 and less than or equal to 200.",
            "examples": [
              30
            ],
            "exclusiveMinimum": 0.0,
            "maximum": 200.0,
            "title": "Number of Steps",
            "type": "integer"
          },
          "strength": {
            "default": 0.8,
            "description": "Floating-point number indicating how much creative the Image to Image generation mode should be. Must be greater than 0 and less than or equal to 1.0.",
            "examples": [
              0.8
            ],
            "exclusiveMinimum": 0.0,
            "maximum": 1.0,
            "title": "Strength",
            "type": "number"
          },
          "width": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "Integer representing the width of image to generate. None will default to 512 for SD 1.5 and 1024 for SD XL and SSD. Supported resolutions (w,h): SDXL={(1536, 640), (768, 1344), (832, 1216), (1344, 768), (1152, 896), (640, 1536), (1216, 832), (896, 1152), (1024, 1024)}, SD1.5={(768, 576), (1024, 576), (640, 512), (384, 704), (640, 768), (640, 640), (1024, 768), (1536, 1024), (768, 1024), (576, 448), (1024, 1024), (896, 896), (704, 1216), (512, 512), (448, 576), (832, 512), (512, 704), (576, 768), (1216, 704), (512, 768), (512, 832), (1024, 1536), (576, 1024), (704, 384), (768, 512)}, SSD={(1536, 640), (768, 1344), (832, 1216), (1344, 768), (1152, 896), (640, 1536), (1216, 832), (896, 1152), (1024, 1024)}.",
            "examples": [
              1024
            ],
            "title": "Output Image Width"
          }
        },
        "required": [
          "prompt"
        ],
        "title": "ImageGenerationRequest",
        "type": "object"
      },
      "ImageGenerationResponse": {
        "description": "Response to an ImageGenerationRequest.",
        "properties": {
          "images": {
            "description": "List of ImageGeneration(s) generated by the request.",
            "items": {
              "$ref": "#/components/schemas/ImageGeneration"
            },
            "title": "Images",
            "type": "array"
          },
          "prediction_time_ms": {
            "description": "Total runtime of the image generation(s).",
            "title": "Prediction Time (ms)",
            "type": "number"
          }
        },
        "required": [
          "images",
          "prediction_time_ms"
        ],
        "title": "ImageGenerationResponse",
        "type": "object"
      },
      "Scheduler": {
        "description": "The schedulers available for image generation.",
        "enum": [
          "PNDM",
          "LMS",
          "KLMS",
          "DDIM",
          "DDPM",
          "HEUN",
          "K_HEUN",
          "K_EULER",
          "K_EULER_ANCESTRAL",
          "DPM_SOLVER_MULTISTEP",
          "DPM_PLUS_PLUS_2M_KARRAS",
          "DPM_PLUS_PLUS_2M_SDE",
          "DPM_PLUS_PLUS_2M_SDE_KARRAS",
          "DPM_SINGLE",
          "DPM_2",
          "DPM_2_KARRAS",
          "DPM_2_ANCESTRAL",
          "DPM_2_ANCESTRAL_KARRAS",
          "DPM_PLUS_PLUS_SDE_KARRAS",
          "UNI_PC",
          "LCM"
        ],
        "title": "Scheduler",
        "type": "string"
      },
      "ValidationError": {
        "description": "Validation error in API.",
        "properties": {
          "loc": {
            "description": "Error location in ValidationError.",
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "title": "Location",
            "type": "array"
          },
          "msg": {
            "description": "Error message in ValidationError.",
            "title": "Message",
            "type": "string"
          },
          "type": {
            "description": "Error type in ValidationError.",
            "title": "Error Type",
            "type": "string"
          }
        },
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError",
        "type": "object"
      },
      "VideoGeneration": {
        "description": "Represent a generated video/animation.",
        "properties": {
          "removed_for_safety": {
            "description": "True if the video/animation was removed for safety, False otherwise.",
            "title": "Removed For Safety",
            "type": "boolean"
          },
          "safety_score": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "description": "Safety score of the video/animation generated.",
            "title": "Safety Score"
          },
          "seed": {
            "description": "Seed used to generate the video/animation. It can be used to recreate the generation.",
            "title": "Seed",
            "type": "integer"
          },
          "video": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The generated video/animation or None if it was removed for safety.",
            "title": "Serialized Video/Animation"
          }
        },
        "required": [
          "video",
          "removed_for_safety",
          "seed",
          "safety_score"
        ],
        "title": "VideoGeneration",
        "type": "object"
      },
      "VideoGenerationRequest": {
        "additionalProperties": false,
        "description": "Generate one video/animation based on the given parameters.",
        "properties": {
          "cfg_scale": {
            "default": 3.0,
            "description": "Floating-point number represeting how closely to adhere to 'image'. Must be a positive number no greater than 10.0.",
            "examples": [
              3.0
            ],
            "exclusiveMinimum": 0.0,
            "maximum": 10.0,
            "title": "Classifier-free Guidance Scale",
            "type": "number"
          },
          "constant_rate_factor": {
            "default": 23,
            "description": "Integer representing the quality of the video encoding. Higher quality means the file will be larger.The range of the CRF scale is [0,51], where 0 is lossless, 23 is the default, and 51 is worst quality possible.",
            "examples": [
              23
            ],
            "maximum": 51.0,
            "minimum": 0.0,
            "title": "Constant Rate Factor",
            "type": "integer"
          },
          "fps": {
            "default": 7,
            "description": "Integer representing how fast the generated frames should play back.",
            "examples": [
              7
            ],
            "maximum": 25.0,
            "minimum": 1.0,
            "title": "Frames per Second",
            "type": "integer"
          },
          "height": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "Integer representing the height of video/animation to generate.If not provided, the output height will be inferred from the input 'image', and the closest resolution supported will be chosen. Supported resolutions (w,h): {(576, 1024), (1024, 576), (768, 768)}.",
            "examples": [
              576
            ],
            "title": "Output Video/Animation Height"
          },
          "image": {
            "description": "Starting point image encoded in base64 string.",
            "title": "Initial Image",
            "type": "string"
          },
          "motion_scale": {
            "default": 0.5,
            "description": "A floating point number between 0.0 and 1.0 indicating how much motion should be in the generated video/animation.",
            "examples": [
              0.5
            ],
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Motion Scale",
            "type": "number"
          },
          "noise_aug_strength": {
            "default": 0.02,
            "description": "A floating point number between 0.0 and 1.0 indicatiing how much noise to add to the initial image. Higher values encourage creativity.",
            "examples": [
              0.02
            ],
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Noise Augmentation",
            "type": "number"
          },
          "num_videos": {
            "default": 1,
            "description": "Integer representing how many output videos/animations to generate with a single 'image' and configuration.",
            "examples": [
              1
            ],
            "exclusiveMinimum": 0.0,
            "maximum": 16.0,
            "title": "Number of Output Images",
            "type": "integer"
          },
          "seed": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "items": {
                  "anyOf": [
                    {
                      "type": "integer"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Integer number or list of integers representing the seeds of random generators.Fixing random seed is useful when attempting to generate a specific video/animation (or set of videos/animations). Must be greater than 0 and less than 2^32.",
            "examples": [
              33445
            ],
            "title": "Fixed Random Seed"
          },
          "steps": {
            "default": 25,
            "description": "Integer repreenting how many steps of diffusion to run. Must be greater than 0 and less than or equal to 50.",
            "examples": [
              25
            ],
            "exclusiveMinimum": 0.0,
            "maximum": 50.0,
            "title": "Number of Steps",
            "type": "integer"
          },
          "width": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "Integer representing the width of video/animation to generate.If not provided, the output width will be inferred from the input 'image', and the closest resolution supported will be chosen. Supported resolutions (w,h): {(576, 1024), (1024, 576), (768, 768)}.",
            "examples": [
              1024
            ],
            "title": "Output Video/Animation Width"
          }
        },
        "required": [
          "image"
        ],
        "title": "VideoGenerationRequest",
        "type": "object"
      },
      "VideoGenerationResponse": {
        "description": "Response to an VideoGenerationRequest.",
        "properties": {
          "prediction_time_ms": {
            "description": "Total runtime of the video(s) generation(s).",
            "title": "Prediction Time (ms)",
            "type": "number"
          },
          "videos": {
            "description": "List of VideoGeneration(s) generated by the request.",
            "items": {
              "$ref": "#/components/schemas/VideoGeneration"
            },
            "title": "Videos",
            "type": "array"
          }
        },
        "required": [
          "videos",
          "prediction_time_ms"
        ],
        "title": "VideoGenerationResponse",
        "type": "object"
      }
    }
  },
  "info": {
    "description": "Image Generation API.",
    "title": "image-gen-api",
    "version": "0.1"
  },
  "openapi": "3.1.0",
  "paths": {
    "/generate/controlnet-sd15": {
      "post": {
        "description": "Generate images in response to the given request.",
        "operationId": "generate_images_generate_controlnet_sd15_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImageGenerationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageGenerationResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "summary": "Generate Images"
      }
    },
    "/generate/controlnet-sdxl": {
      "post": {
        "description": "Generate images in response to the given request.",
        "operationId": "generate_images_generate_controlnet_sdxl_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImageGenerationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageGenerationResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "summary": "Generate Images"
      }
    },
    "/generate/sd": {
      "post": {
        "description": "Generate images in response to the given request.",
        "operationId": "generate_images_generate_sd_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImageGenerationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageGenerationResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "summary": "Generate Images"
      }
    },
    "/generate/sd3": {
      "post": {
        "description": "Generate images in response to the given request.",
        "operationId": "generate_images_generate_sd3_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImageGenerationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageGenerationResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "summary": "Generate Images"
      }
    },
    "/generate/sdxl": {
      "post": {
        "description": "Generate images in response to the given request.",
        "operationId": "generate_images_generate_sdxl_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImageGenerationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageGenerationResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "summary": "Generate Images"
      }
    },
    "/generate/ssd": {
      "post": {
        "description": "Generate images in response to the given request.",
        "operationId": "generate_images_generate_ssd_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImageGenerationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageGenerationResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "summary": "Generate Images"
      }
    },
    "/generate/svd": {
      "post": {
        "description": "Generate videos in response to the given request.",
        "operationId": "generate_videos_generate_svd_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VideoGenerationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VideoGenerationResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "summary": "Generate Videos"
      }
    }
  },
  "servers": [
    {
      "url": "https://image.octoai.run"
    }
  ]
}